{"ast":null,"code":"var _jsxFileName = \"/Users/kyleschneider/Documents/pt-oncology-mvp/src/components/User/register/WizardFormSecondPage.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport validate from './validate';\nimport renderField from './renderField';\nimport { renderDatePicker } from './datepicker';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport { connect } from 'react-redux';\n\nvar renderError = function renderError(_ref) {\n  var _ref$meta = _ref.meta,\n      touched = _ref$meta.touched,\n      error = _ref$meta.error;\n  return touched && error ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, error) : false;\n};\n\nvar renderDateTimePicker = function renderDateTimePicker(_ref2) {\n  var _ref2$input = _ref2.input,\n      onChange = _ref2$input.onChange,\n      value = _ref2$input.value,\n      showTime = _ref2.showTime;\n  return React.createElement(DateTimePicker, {\n    onChange: onChange,\n    format: \"DD MMM YYYY\",\n    time: showTime,\n    value: !value ? null : new Date(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  });\n};\n\nvar WizardFormSecondPage = function WizardFormSecondPage(props) {\n  var handleSubmit = props.handleSubmit,\n      previousPage = props.previousPage,\n      pristine = props.pristine,\n      reset = props.reset,\n      submitting = props.submitting;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"ui form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"phoneNumber\",\n    type: \"text\",\n    component: renderField,\n    label: \"Phone Number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Date of Birth:\")), React.createElement(Field, {\n    name: \"DOB\",\n    component: renderDatePicker,\n    label: \"Date of Birth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"ui button primary\",\n    onClick: previousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Previous\"), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"ui button primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Continue\")));\n};\n\nvar formWrapped = reduxForm({\n  form: 'register',\n  //Form name is same\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true,\n  // <------ unregister fields on unmount\n  validate: validate\n})(WizardFormSecondPage);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isSignedIn: state.auth.isSignedIn,\n    userId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps)(formWrapped);","map":{"version":3,"sources":["/Users/kyleschneider/Documents/pt-oncology-mvp/src/components/User/register/WizardFormSecondPage.js"],"names":["React","Field","reduxForm","validate","renderField","renderDatePicker","DateTimePicker","connect","renderError","meta","touched","error","renderDateTimePicker","input","onChange","value","showTime","Date","WizardFormSecondPage","props","handleSubmit","previousPage","pristine","reset","submitting","formWrapped","form","destroyOnUnmount","forceUnregisterOnUnmount","mapStateToProps","state","isSignedIn","auth","userId"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport validate from './validate'\nimport renderField from './renderField'\nimport {renderDatePicker} from './datepicker'\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker'\nimport { connect } from 'react-redux'\n\nconst renderError = ({ meta: { touched, error } }) =>\n  touched && error ? <span>{error}</span> : false\n\n\n\n  const renderDateTimePicker = ({ input: { onChange, value }, showTime }) =>\n  <DateTimePicker\n    onChange={onChange}\n    format=\"DD MMM YYYY\"\n    time={showTime}\n    value={!value ? null : new Date(value)}\n  />\n\n\nconst WizardFormSecondPage = props => {\n  const { handleSubmit, previousPage, pristine, reset, submitting } = props\n\n  return (\n    <form onSubmit={handleSubmit} className=\"ui form\">\n\n        <Field name=\"phoneNumber\" type=\"text\" component={renderField} label=\"Phone Number\"/>\n        \n        <div className='field'>\n        <label>Date of Birth:</label>\n        </div>\n\n        <Field name=\"DOB\"  component={renderDatePicker} label=\"Date of Birth\"/>  \n\n      <div>\n        <br/>\n        <button type=\"button\" className=\"ui button primary\" onClick={previousPage}>\n          Previous\n        </button>\n        <button type=\"submit\" className=\"ui button primary\">\n          Continue\n        </button>\n      </div>\n    </form>\n  )\n}\n\n\nconst formWrapped = reduxForm({\n  form: 'register', //Form name is same\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true, // <------ unregister fields on unmount\n  validate\n})(WizardFormSecondPage)\n\nconst mapStateToProps = state => ({\n  isSignedIn: state.auth.isSignedIn,\n  userId: state.auth.userId\n});\n\n\n\nexport default connect(mapStateToProps)(formWrapped)"]},"metadata":{},"sourceType":"module"}