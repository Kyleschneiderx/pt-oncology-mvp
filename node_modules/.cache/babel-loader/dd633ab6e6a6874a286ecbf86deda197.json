{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kyleschneider/Documents/pt-oncology-mvp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kyleschneider/Documents/pt-oncology-mvp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { SIGN_IN, SIGN_OUT, SIGN_UP, REGISTER_PATIENT } from '../actions/types'; /// User actions ===========\n\nexport var registerPatient = function registerPatient(_ref) {\n  var email = _ref.email,\n      firstName = _ref.firstName,\n      lastName = _ref.lastName,\n      phoneNumber = _ref.phoneNumber,\n      DOB = _ref.DOB,\n      doctor = _ref.doctor,\n      date_of_diagnosis = _ref.date_of_diagnosis,\n      diagnosis = _ref.diagnosis,\n      notes = _ref.notes;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var body, request;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                body = {\n                  query: \"\\n         mutation {\\n             createPatient(PatientInput:{email: \\\"\".concat(email, \"\\\", firstName: \\\"\").concat(firstName, \"\\\",lastName:\\\"\").concat(lastName, \"\\\", phoneNumber: \\\"\").concat(phoneNumber, \"\\\",\\n                  diagnosis:\\\"\").concat(diagnosis, \"\\\" \\n             \\t\\t\\tdate_of_diagnosis:\\\"\").concat(date_of_diagnosis, \"\\\",\\n                   DOB: \\\"\").concat(DOB, \"\\\",\\n                   doctor: \\\"\").concat(doctor, \"\\\",\\n                   notes: \\\"\").concat(notes, \"\\\" }){\\n               _id\\n               firstName\\n               lastName\\n               DOB\\n               doctor\\n             }\\n           }\\n          \")\n                };\n                console.log(body);\n                _context.next = 4;\n                return fetch('http://localhost:8080/graphql', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(body)\n                }).then(function (res) {\n                  console.log(res);\n                  return res.json();\n                }) // .then(resData => {\n                //   if (resData.errors && resData.errors[0] === 422) {\n                //     throw new Error(\n                //       \"Validation failed. Make sure the email address isn't used yet!\"\n                //     );\n                //   }\n                //   if(resData.errors){\n                //     throw new Error('User creation failed')\n                //   }\n                // })\n                .then(function (data) {\n                  console.log(data);\n                  return data.data.createdPatient;\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 4:\n                request = _context.sent;\n                // console.log(this.props)\n                // // console.log(request.createUser._id, \"Hello\")\n                // console.log(request.token)\n                // this.props.history.push('/quiz');\n                dispatch({\n                  type: REGISTER_PATIENT,\n                  payload: request\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var signUp = function signUp(_ref3) {\n  var email = _ref3.email,\n      name = _ref3.name,\n      password = _ref3.password,\n      phoneNumber = _ref3.phoneNumber;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var body, request;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                body = {\n                  query: \"\\n        mutation{\\n          createUser(email:\\\"\".concat(email, \"\\\",name:\\\"\").concat(name, \"\\\", password: \\\"\").concat(password, \"\\\", phoneNumber:\\\"\").concat(phoneNumber, \"\\\"){\\n            _id\\n            email\\n            token\\n          }\\n        }\\n        \")\n                };\n                _context2.next = 3;\n                return fetch('http://localhost:8080/graphql', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(body)\n                }).then(function (res) {\n                  return res.json();\n                }) // .then(resData => {\n                //   if (resData.errors && resData.errors[0] === 422) {\n                //     throw new Error(\n                //       \"Validation failed. Make sure the email address isn't used yet!\"\n                //     );\n                //   }\n                //   if(resData.errors){\n                //     throw new Error('User creation failed')\n                //   }\n                // })\n                .then(function (data) {\n                  return data.data.createUser;\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 3:\n                request = _context2.sent;\n                console.log(request._id, \"Just Request\"); // console.log(request.createUser._id, \"Hello\")\n\n                console.log(request.token);\n                dispatch({\n                  type: SIGN_UP,\n                  id: request._id,\n                  payload: request.token\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; // export const signUp =()=>{\n//     return {\n//         type:SIGN_UP\n//     }\n// }\n\nexport var signIn = function signIn(_ref5) {\n  var email = _ref5.email,\n      password = _ref5.password;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var body, request;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                body = {\n                  query: \"\\n    {\\n      login(email:\\\"\".concat(email, \"\\\", password:\\\"\").concat(password, \"\\\"){\\n        token\\n        userId\\n      }\\n    }\\n      \")\n                };\n                console.log(body, \"body\");\n                _context3.next = 4;\n                return fetch('http://localhost:8080/graphql', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(body)\n                }).then(function (res) {\n                  return res.json();\n                }) // .then(resData => {\n                //   if (resData.errors && resData.errors[0] === 422) {\n                //     throw new Error(\n                //       \"Validation failed. Make sure the email address isn't used yet!\"\n                //     );\n                //   }\n                //   if(resData.errors){\n                //     throw new Error('User login failed')\n                //   }\n                // })\n                .then(function (resData) {\n                  console.log(resData, \"resData\");\n                  return resData.data.login;\n                }).catch(function (err) {\n                  console.log(err, \"error\");\n                });\n\n              case 4:\n                request = _context3.sent;\n                console.log(request, \"request\");\n                dispatch({\n                  type: SIGN_IN,\n                  id: request.userId,\n                  payload: request.token\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport var auth = function auth() {\n  return function (dispatch) {\n    dispatch(signUp());\n  };\n};","map":{"version":3,"sources":["/Users/kyleschneider/Documents/pt-oncology-mvp/src/store/actions/index.js"],"names":["SIGN_IN","SIGN_OUT","SIGN_UP","REGISTER_PATIENT","registerPatient","email","firstName","lastName","phoneNumber","DOB","doctor","date_of_diagnosis","diagnosis","notes","dispatch","body","query","console","log","fetch","method","headers","JSON","stringify","then","res","json","data","createdPatient","catch","error","request","type","payload","signUp","name","password","createUser","_id","token","id","signIn","resData","login","err","userId","signOut","auth"],"mappings":"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","sourcesContent":["import { SIGN_IN, SIGN_OUT, SIGN_UP, REGISTER_PATIENT } from '../actions/types';\n\n/// User actions ===========\n\nexport const registerPatient =({email,firstName, lastName, phoneNumber, DOB, doctor, date_of_diagnosis,diagnosis, notes})=>async dispatch =>{\n\n    const body = {\n        query:`\n         mutation {\n             createPatient(PatientInput:{email: \"${email}\", firstName: \"${firstName}\",lastName:\"${lastName}\", phoneNumber: \"${phoneNumber}\",\n                  diagnosis:\"${diagnosis}\" \n             \t\t\tdate_of_diagnosis:\"${date_of_diagnosis}\",\n                   DOB: \"${DOB}\",\n                   doctor: \"${doctor}\",\n                   notes: \"${notes}\" }){\n               _id\n               firstName\n               lastName\n               DOB\n               doctor\n             }\n           }\n          `\n        \n    }\n\n    console.log(body)\n\n    const request = await fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      })\n        .then(res => {\n          console.log(res)\n          return res.json();\n        })\n        // .then(resData => {\n        //   if (resData.errors && resData.errors[0] === 422) {\n        //     throw new Error(\n        //       \"Validation failed. Make sure the email address isn't used yet!\"\n        //     );\n        //   }\n        //   if(resData.errors){\n        //     throw new Error('User creation failed')\n        //   }\n\n\n        // })\n        .then(data => {    \n          console.log(data)     \n          return data.data.createdPatient\n        }).catch(error =>{\n          console.log(error)\n        })\n        // console.log(this.props)\n        // // console.log(request.createUser._id, \"Hello\")\n        // console.log(request.token)\n        // this.props.history.push('/quiz');\n    dispatch({\n        type: REGISTER_PATIENT,\n        payload: request\n    })\n}\n\n\nexport const signUp =({email,name, password, phoneNumber})=>async dispatch =>{\n\n  const body = {\n      query:`\n        mutation{\n          createUser(email:\"${email}\",name:\"${name}\", password: \"${password}\", phoneNumber:\"${phoneNumber}\"){\n            _id\n            email\n            token\n          }\n        }\n        `\n      \n  }\n\n  const request = await fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n      .then(res => {    \n        return res.json();\n      })\n      // .then(resData => {\n      //   if (resData.errors && resData.errors[0] === 422) {\n      //     throw new Error(\n      //       \"Validation failed. Make sure the email address isn't used yet!\"\n      //     );\n      //   }\n      //   if(resData.errors){\n      //     throw new Error('User creation failed')\n      //   }\n\n\n      // })\n      .then(data => {\n        return data.data.createUser\n      }).catch(error =>{\n        console.log(error)\n      })\n      console.log(request._id, \"Just Request\")\n      // console.log(request.createUser._id, \"Hello\")\n      console.log(request.token)\n  dispatch({\n      type: SIGN_UP,\n      id: request._id,\n      payload: request.token\n  })\n}\n\n\n// export const signUp =()=>{\n//     return {\n//         type:SIGN_UP\n        \n//     }\n// }\n\n\nexport const signIn =({email, password})=> async dispatch =>{\n\n  const body = {\n    query:`\n    {\n      login(email:\"${email}\", password:\"${password}\"){\n        token\n        userId\n      }\n    }\n      `  \n  }\n  console.log(body, \"body\")\n\n  const request = await fetch('http://localhost:8080/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  })\n    .then(res => {    \n      return res.json();\n    })\n    // .then(resData => {\n    //   if (resData.errors && resData.errors[0] === 422) {\n    //     throw new Error(\n    //       \"Validation failed. Make sure the email address isn't used yet!\"\n    //     );\n    //   }\n    //   if(resData.errors){\n    //     throw new Error('User login failed')\n    //   }\n\n    // })\n    .then(resData => {\n      console.log(resData, \"resData\");\n      return (resData.data.login)\n    })\n    .catch(err => {\n      console.log(err, \"error\");\n    });\n\n\n\n\n    console.log(request, \"request\")\n\n    dispatch({\n        type:SIGN_IN,\n        id:request.userId,\n        payload:request.token     \n    })\n}\n\nexport const signOut =()=>{\n    return {\n        type:SIGN_OUT,\n        \n    }\n}\n\n\nexport const auth =()=>{\n    return dispatch =>{\n        dispatch(signUp())\n    }\n}"]},"metadata":{},"sourceType":"module"}